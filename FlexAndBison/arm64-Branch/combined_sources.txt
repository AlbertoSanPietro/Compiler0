test.c:
int main() {
    int x = 2;
    while (x < 10) {
        if (x % 2 == 0)
            x = x + 1;
        else
            x = x + 2;
    }
    return x;
}


test.asm:
.text
.global _start
_start:
    stp x29, x30, [sp, #-16]!
    mov x29, sp
    sub sp, sp, #512
    mov x0, #2
    str x0, [x29, #-8]
.L0:
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #10
    ldr x1, [sp], #16
    cmp x1, x0
    cset x0, lt
    cbz x0, .L1
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #2
    ldr x1, [sp], #16
    udiv x2, x1, x0
    msub x0, x2, x0, x1
    str x0, [sp, #-16]!
    mov x0, #0
    ldr x1, [sp], #16
    cmp x1, x0
    cset x0, eq
    cbz x0, .L2
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #1
    ldr x1, [sp], #16
    add x0, x1, x0
    str x0, [x29, #-8]
    b .L3
.L2:
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #2
    ldr x1, [sp], #16
    add x0, x1, x0
    str x0, [x29, #-8]
.L3:
    b .L0
.L1:
    ldr x0, [x29, #-8]
    mov x8, #93
    svc #0
.section .data
divzero_msg: .asciz "Division by zero!\n"

Qest.c:
int main() {
    int x=5;
    int y=x+1;
    int z=0;
    if (x == 5) {
        z = y;
    }
    
    x=z+1;

    return x;
}

qest.asm:
.text
.global _start
_start:
    stp x29, x30, [sp, #-16]!
    mov x29, sp
    sub sp, sp, #512
    mov x0, #5
    str x0, [x29, #-8]
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #1
    ldr x1, [sp], #16
    add x0, x1, x0
    str x0, [x29, #-16]
    mov x0, #0
    str x0, [x29, #-24]
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #5
    ldr x1, [sp], #16
    cmp x1, x0
    cset x0, eq
    cbz x0, .L0
    ldr x0, [x29, #-16]
    str x0, [x29, #-24]
    b .L1
.L0:
.L1:
    ldr x0, [x29, #-24]
    str x0, [sp, #-16]!
    mov x0, #1
    ldr x1, [sp], #16
    add x0, x1, x0
    str x0, [x29, #-8]
    ldr x0, [x29, #-8]
    mov x8, #93
    svc #0
.section .data
divzero_msg: .asciz "Division by zero!\n"

Test.c:
int main() {
    int x=1;
    return x;
}

Test.asm:
.text
.global _start
_start:
    stp x29, x30, [sp, #-16]!
    mov x29, sp
    sub sp, sp, #512
    mov x0, #1
    str x0, [x29, #-8]
    ldr x0, [x29, #-8]
    mov x8, #93
    svc #0
.section .data
divzero_msg: .asciz "Division by zero!\n"

Zest.c:
int main() {
    int x=5;
    if (x % 2 == 0)
        x = x + 1;
    else 
        x = x +2;

    return x;
}

zest.asm:
.text
.global _start
_start:
    stp x29, x30, [sp, #-16]!
    mov x29, sp
    sub sp, sp, #512
    mov x0, #5
    str x0, [x29, #-8]
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #2
    ldr x1, [sp], #16
    udiv x2, x1, x0
    msub x0, x2, x0, x1
    str x0, [sp, #-16]!
    mov x0, #0
    ldr x1, [sp], #16
    cmp x1, x0
    cset x0, eq
    cbz x0, .L0
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #1
    ldr x1, [sp], #16
    add x0, x1, x0
    str x0, [x29, #-8]
    b .L1
.L0:
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #2
    ldr x1, [sp], #16
    add x0, x1, x0
    str x0, [x29, #-8]
.L1:
    ldr x0, [x29, #-8]
    mov x8, #93
    svc #0
.section .data
divzero_msg: .asciz "Division by zero!\n"

Dest.c:
int main() {
    int x = 10 / 2;
    int y = x % 2;

    return x+y;
}

dest.asm:
.text
.global _start
_start:
    stp x29, x30, [sp, #-16]!
    mov x29, sp
    sub sp, sp, #512
    mov x0, #10
    str x0, [sp, #-16]!
    mov x0, #2
    ldr x1, [sp], #16
    udiv x0, x1, x0
    str x0, [x29, #-8]
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    mov x0, #2
    ldr x1, [sp], #16
    udiv x2, x1, x0
    msub x0, x2, x0, x1
    str x0, [x29, #-16]
    ldr x0, [x29, #-8]
    str x0, [sp, #-16]!
    ldr x0, [x29, #-16]
    ldr x1, [sp], #16
    add x0, x1, x0
    mov x8, #93
    svc #0
.section .data
divzero_msg: .asciz "Division by zero!\n"
